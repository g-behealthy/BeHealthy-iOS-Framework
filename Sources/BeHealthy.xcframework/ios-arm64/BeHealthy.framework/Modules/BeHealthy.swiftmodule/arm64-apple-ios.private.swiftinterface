// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BeHealthy
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AuthenticationServices
import BackgroundTasks
import CoreData
import CoreGraphics
import CoreText
import Foundation
import HealthKit
import LocalAuthentication
import MessageUI
import PDFKit
import QuartzCore
import Security
import Swift
import SystemConfiguration
import UIKit
import UserNotifications
import WatchConnectivity
import WebKit
import _Concurrency
import _StringProcessing
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class ImageAsset : BeHealthy.Asset {
  final public let name: Swift.String
  final public let directory: Swift.String
  final public let width: Swift.Double
  final public let height: Swift.Double
  override final public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public typealias AnimationFrameTime = CoreFoundation.CGFloat
public typealias AnimationProgressTime = CoreFoundation.CGFloat
public protocol AnimationCacheProvider {
  func animation(forKey: Swift.String) -> BeHealthy.Animation?
  func setAnimation(_ animation: BeHealthy.Animation, forKey: Swift.String)
  func clearCache()
}
extension BeHealthy.Color : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
infix operator +| : DefaultPrecedence
infix operator +- : DefaultPrecedence
public class BundleImageProvider : BeHealthy.AnimationImageProvider {
  public init(bundle: Foundation.Bundle, searchPath: Swift.String?)
  public func imageForAsset(asset: BeHealthy.ImageAsset) -> CoreGraphics.CGImage?
  @objc deinit
}
final public class ColorValueProvider : BeHealthy.AnyValueProvider {
  public init(block: @escaping BeHealthy.ColorValueProvider.ColorValueBlock)
  public init(_ color: BeHealthy.Color)
  public typealias ColorValueBlock = (CoreFoundation.CGFloat) -> BeHealthy.Color
  final public var color: BeHealthy.Color {
    get
    set
  }
  final public var valueType: Any.Type {
    get
  }
  final public func hasUpdate(frame _: CoreFoundation.CGFloat) -> Swift.Bool
  final public func value(frame: CoreFoundation.CGFloat) -> Any
  @objc deinit
}
public typealias LottieCompletionBlock = (Swift.Bool) -> Swift.Void
final public class SizeValueProvider : BeHealthy.AnyValueProvider {
  public init(block: @escaping BeHealthy.SizeValueProvider.SizeValueBlock)
  public init(_ size: CoreFoundation.CGSize)
  public typealias SizeValueBlock = (CoreFoundation.CGFloat) -> CoreFoundation.CGSize
  final public var size: CoreFoundation.CGSize {
    get
    set
  }
  final public var valueType: Any.Type {
    get
  }
  final public func hasUpdate(frame _: CoreFoundation.CGFloat) -> Swift.Bool
  final public func value(frame: CoreFoundation.CGFloat) -> Any
  @objc deinit
}
public protocol AnimationTextProvider : AnyObject {
  func textFor(keypathName: Swift.String, sourceText: Swift.String) -> Swift.String
}
final public class DictionaryTextProvider : BeHealthy.AnimationTextProvider {
  public init(_ values: [Swift.String : Swift.String])
  final public func textFor(keypathName: Swift.String, sourceText: Swift.String) -> Swift.String
  @objc deinit
}
final public class DefaultTextProvider : BeHealthy.AnimationTextProvider {
  public init()
  final public func textFor(keypathName _: Swift.String, sourceText: Swift.String) -> Swift.String
  @objc deinit
}
public protocol AnyValueProvider {
  var valueType: Any.Type { get }
  func hasUpdate(frame: BeHealthy.AnimationFrameTime) -> Swift.Bool
  func value(frame: BeHealthy.AnimationFrameTime) -> Any
}
public protocol AnimationFontProvider {
  func fontFor(family: Swift.String, size: CoreFoundation.CGFloat) -> CoreText.CTFont?
}
final public class DefaultFontProvider : BeHealthy.AnimationFontProvider {
  public init()
  final public func fontFor(family: Swift.String, size: CoreFoundation.CGFloat) -> CoreText.CTFont?
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class BeHealthyAppDelegate : ObjectiveC.NSObject {
  @objc public static let instance: BeHealthy.BeHealthyAppDelegate
  public var window: UIKit.UIWindow?
  @objc public func application(_ application: UIKit.UIApplication, didFinishLaunchingWithOptions launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]?)
  @objc public func applicationWillEnterForeground(_ application: UIKit.UIApplication)
  @objc public func applicationDidEnterBackground(_ application: UIKit.UIApplication)
  @objc public func applicationDidBecomeActive(_ application: UIKit.UIApplication)
  @objc public func applicationWillTerminate(_ application: UIKit.UIApplication)
  @objc public func application(_ app: UIKit.UIApplication, open url: Foundation.URL, options: [UIKit.UIApplication.OpenURLOptionsKey : Any] = [:]) -> Swift.Bool
  @objc public func application(_ application: UIKit.UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Foundation.Data)
  @objc public func application(_ application: UIKit.UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Swift.Error)
  @objc public func application(_ application: UIKit.UIApplication, didReceiveRemoteNotification userInfo: [Swift.AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIKit.UIBackgroundFetchResult) -> Swift.Void)
  @objc public func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, willPresent notification: UserNotifications.UNNotification, withCompletionHandler completionHandler: @escaping (UserNotifications.UNNotificationPresentationOptions) -> Swift.Void)
  @objc public func application(_ application: UIKit.UIApplication, handleEventsForBackgroundURLSession identifier: Swift.String, completionHandler: @escaping () -> Swift.Void)
  @objc deinit
}
final public class PointValueProvider : BeHealthy.AnyValueProvider {
  public init(block: @escaping BeHealthy.PointValueProvider.PointValueBlock)
  public init(_ point: CoreFoundation.CGPoint)
  public typealias PointValueBlock = (CoreFoundation.CGFloat) -> CoreFoundation.CGPoint
  final public var point: CoreFoundation.CGPoint {
    get
    set
  }
  final public var valueType: Any.Type {
    get
  }
  final public func hasUpdate(frame _: CoreFoundation.CGFloat) -> Swift.Bool
  final public func value(frame: CoreFoundation.CGFloat) -> Any
  @objc deinit
}
public enum ColorFormatDenominator {
  case One
  case OneHundred
  case TwoFiftyFive
  public static func == (a: BeHealthy.ColorFormatDenominator, b: BeHealthy.ColorFormatDenominator) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct Color {
  public var r: Swift.Double
  public var g: Swift.Double
  public var b: Swift.Double
  public var a: Swift.Double
  public init(r: Swift.Double, g: Swift.Double, b: Swift.Double, a: Swift.Double, denominator: BeHealthy.ColorFormatDenominator = .One)
}
extension BeHealthy.Vector1D : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension BeHealthy.Vector3D : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension BeHealthy.Vector3D {
  public var pointValue: CoreFoundation.CGPoint {
    get
  }
  public var sizeValue: CoreFoundation.CGSize {
    get
  }
}
extension UIKit.UIColor {
  public var lottieColorValue: BeHealthy.Color {
    get
  }
}
public enum LayerType : Swift.Int, Swift.Codable {
  case precomp
  case solid
  case image
  case null
  case shape
  case text
  public init(from decoder: Swift.Decoder) throws
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum MatteType : Swift.Int, Swift.Codable {
  case none
  case add
  case invert
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum BlendMode : Swift.Int, Swift.Codable {
  case normal
  case multiply
  case screen
  case overlay
  case darken
  case lighten
  case colorDodge
  case colorBurn
  case hardLight
  case softLight
  case difference
  case exclusion
  case hue
  case saturation
  case color
  case luminosity
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class AnimatedSwitch : BeHealthy.AnimatedControl {
  @_Concurrency.MainActor(unsafe) override public init(animation: BeHealthy.Animation)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  public enum CancelBehavior {
    case reverse
    case none
    public static func == (a: BeHealthy.AnimatedSwitch.CancelBehavior, b: BeHealthy.AnimatedSwitch.CancelBehavior) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) public var cancelBehavior: BeHealthy.AnimatedSwitch.CancelBehavior
  @_Concurrency.MainActor(unsafe) public var isOn: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func setIsOn(_ isOn: Swift.Bool, animated: Swift.Bool, shouldFireHaptics: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) public func setProgressForState(fromProgress: BeHealthy.AnimationProgressTime, toProgress: BeHealthy.AnimationProgressTime, forOnState: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func endTracking(_ touch: UIKit.UITouch?, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) override public func animationDidSet()
  @objc deinit
}
public protocol AnimationImageProvider {
  func imageForAsset(asset: BeHealthy.ImageAsset) -> CoreGraphics.CGImage?
}
public struct AnimationKeypath {
  public init(keypath: Swift.String)
  public init(keys: [Swift.String])
}
public enum CoordinateSpace : Swift.Int, Swift.Codable {
  case type2d
  case type3d
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
final public class Animation : Swift.Codable {
  required public init(from decoder: Swift.Decoder) throws
  final public let startFrame: BeHealthy.AnimationFrameTime
  final public let endFrame: BeHealthy.AnimationFrameTime
  final public let framerate: Swift.Double
  final public var markerNames: [Swift.String] {
    get
  }
  @objc deinit
  final public func encode(to encoder: Swift.Encoder) throws
}
extension BeHealthy.AnimationView {
  @_Concurrency.MainActor(unsafe) convenience public init(name: Swift.String, bundle: Foundation.Bundle = Bundle.main, imageProvider: BeHealthy.AnimationImageProvider? = nil, animationCache: BeHealthy.AnimationCacheProvider? = LRUAnimationCache.sharedCache)
  @_Concurrency.MainActor(unsafe) convenience public init(filePath: Swift.String, imageProvider: BeHealthy.AnimationImageProvider? = nil, animationCache: BeHealthy.AnimationCacheProvider? = LRUAnimationCache.sharedCache)
  @_Concurrency.MainActor(unsafe) convenience public init(url: Foundation.URL, imageProvider: BeHealthy.AnimationImageProvider? = nil, closure: @escaping BeHealthy.AnimationView.DownloadClosure, animationCache: BeHealthy.AnimationCacheProvider? = LRUAnimationCache.sharedCache)
  public typealias DownloadClosure = (Swift.Error?) -> Swift.Void
}
public class Asset : Swift.Codable {
  required public init(from decoder: Swift.Decoder) throws
  final public let id: Swift.String
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class AnimatedButton : BeHealthy.AnimatedControl {
  @_Concurrency.MainActor(unsafe) override public init(animation: BeHealthy.Animation)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func setPlayRange(fromProgress: BeHealthy.AnimationProgressTime, toProgress: BeHealthy.AnimationProgressTime, event: UIKit.UIControl.Event)
  @_Concurrency.MainActor(unsafe) public func setPlayRange(fromMarker fromName: Swift.String, toMarker toName: Swift.String, event: UIKit.UIControl.Event)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func beginTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func endTracking(_ touch: UIKit.UITouch?, with event: UIKit.UIEvent?)
  @objc deinit
}
public enum LottieBackgroundBehavior {
  case stop
  case pause
  case pauseAndRestore
  case forceFinish
  public static func == (a: BeHealthy.LottieBackgroundBehavior, b: BeHealthy.LottieBackgroundBehavior) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum LottieLoopMode {
  case playOnce
  case loop
  case autoReverse
  case `repeat`(Swift.Float)
  case repeatBackwards(Swift.Float)
}
extension BeHealthy.LottieLoopMode : Swift.Equatable {
  public static func == (lhs: BeHealthy.LottieLoopMode, rhs: BeHealthy.LottieLoopMode) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) final public class AnimationView : BeHealthy.LottieView {
  @_Concurrency.MainActor(unsafe) public init(animation: BeHealthy.Animation?, imageProvider: BeHealthy.AnimationImageProvider? = nil, textProvider: BeHealthy.AnimationTextProvider = DefaultTextProvider(), fontProvider: BeHealthy.AnimationFontProvider = DefaultFontProvider())
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame _: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) final public var backgroundBehavior: BeHealthy.LottieBackgroundBehavior
  @_Concurrency.MainActor(unsafe) final public var animation: BeHealthy.Animation? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var imageProvider: BeHealthy.AnimationImageProvider {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var textProvider: BeHealthy.AnimationTextProvider {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var fontProvider: BeHealthy.AnimationFontProvider {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var isAnimationPlaying: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var isAnimationQueued: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var loopMode: BeHealthy.LottieLoopMode {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var shouldRasterizeWhenIdle: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var currentProgress: BeHealthy.AnimationProgressTime {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var currentTime: Foundation.TimeInterval {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var currentFrame: BeHealthy.AnimationFrameTime {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var realtimeAnimationFrame: BeHealthy.AnimationFrameTime {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var realtimeAnimationProgress: BeHealthy.AnimationProgressTime {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var animationSpeed: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var respectAnimationFrameRate: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var viewportFrame: CoreFoundation.CGRect? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) final public func play(completion: BeHealthy.LottieCompletionBlock? = nil)
  @_Concurrency.MainActor(unsafe) final public func play(fromProgress: BeHealthy.AnimationProgressTime? = nil, toProgress: BeHealthy.AnimationProgressTime, loopMode: BeHealthy.LottieLoopMode? = nil, completion: BeHealthy.LottieCompletionBlock? = nil)
  @_Concurrency.MainActor(unsafe) final public func play(fromFrame: BeHealthy.AnimationFrameTime? = nil, toFrame: BeHealthy.AnimationFrameTime, loopMode: BeHealthy.LottieLoopMode? = nil, completion: BeHealthy.LottieCompletionBlock? = nil)
  @_Concurrency.MainActor(unsafe) final public func play(fromMarker: Swift.String? = nil, toMarker: Swift.String, loopMode: BeHealthy.LottieLoopMode? = nil, completion: BeHealthy.LottieCompletionBlock? = nil)
  @_Concurrency.MainActor(unsafe) final public func stop()
  @_Concurrency.MainActor(unsafe) final public func pause()
  @_Concurrency.MainActor(unsafe) final public func reloadImages()
  @_Concurrency.MainActor(unsafe) final public func forceDisplayUpdate()
  @_Concurrency.MainActor(unsafe) final public func setValueProvider(_ valueProvider: BeHealthy.AnyValueProvider, keypath: BeHealthy.AnimationKeypath)
  @_Concurrency.MainActor(unsafe) final public func getValue(for keypath: BeHealthy.AnimationKeypath, atFrame: BeHealthy.AnimationFrameTime?) -> Any?
  @_Concurrency.MainActor(unsafe) final public func logHierarchyKeypaths()
  @_Concurrency.MainActor(unsafe) final public func addSubview(_ subview: BeHealthy.AnimationSubview, forLayerAt keypath: BeHealthy.AnimationKeypath)
  @_Concurrency.MainActor(unsafe) final public func convert(_ rect: CoreFoundation.CGRect, toLayerAt keypath: BeHealthy.AnimationKeypath?) -> CoreFoundation.CGRect?
  @_Concurrency.MainActor(unsafe) final public func convert(_ point: CoreFoundation.CGPoint, toLayerAt keypath: BeHealthy.AnimationKeypath?) -> CoreFoundation.CGPoint?
  @_Concurrency.MainActor(unsafe) final public func setNodeIsEnabled(isEnabled: Swift.Bool, keypath: BeHealthy.AnimationKeypath)
  @_Concurrency.MainActor(unsafe) final public func progressTime(forMarker named: Swift.String) -> BeHealthy.AnimationProgressTime?
  @_Concurrency.MainActor(unsafe) final public func frameTime(forMarker named: Swift.String) -> BeHealthy.AnimationFrameTime?
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class AnimatedControl : UIKit.UIControl {
  @_Concurrency.MainActor(unsafe) public init(animation: BeHealthy.Animation)
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func beginTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func continueTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func endTracking(_ touch: UIKit.UITouch?, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func cancelTracking(with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) open func animationDidSet()
  @_Concurrency.MainActor(unsafe) final public let animationView: BeHealthy.AnimationView
  @_Concurrency.MainActor(unsafe) public var animation: BeHealthy.Animation? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var animationSpeed: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func setLayer(named: Swift.String, forState: UIKit.UIControl.State)
  @_Concurrency.MainActor(unsafe) public func setValueProvider(_ valueProvider: BeHealthy.AnyValueProvider, keypath: BeHealthy.AnimationKeypath)
  @objc deinit
}
@objc public enum BeHealthyEnvironment : Swift.Int {
  case stage
  case production
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum BeHealthyLanguage : Swift.Int, Swift.RawRepresentable {
  case english
  case spanish
  case portuguese
  case arabic
  public typealias RawValue = Swift.String
  public var rawValue: BeHealthy.BeHealthyLanguage.RawValue {
    get
  }
  public init?(rawValue: BeHealthy.BeHealthyLanguage.RawValue)
}
@_hasMissingDesignatedInitializers @objc public class BeHealthyConfig : ObjectiveC.NSObject {
  @objc public static let instance: BeHealthy.BeHealthyConfig
  @objc deinit
}
extension BeHealthy.BeHealthyConfig {
  @objc dynamic public func setFirebaseConfigurationFile(path: Swift.String?, shouldTrackBeHealthyAnalytics: Swift.Bool = true)
  @objc dynamic public func rootViewController() -> UIKit.UIViewController
  @objc dynamic public func progressViewController() -> UIKit.UIViewController
  @objc dynamic public func enrollmentViewController() -> UIKit.UIViewController
  @objc dynamic public func setToken(_ token: Swift.String, completion: @escaping ((Swift.String?) -> ()))
  @objc dynamic public func setEnrollToken(_ enrollToken: Swift.String, completion: @escaping (() -> ()))
  @objc dynamic public func setEmail(_ email: Swift.String)
  @objc dynamic public func login(with completion: @escaping ((Swift.String) -> ()))
  @objc dynamic public func removeCredentials()
  @objc dynamic public func setCommunity(_ community: Swift.String)
  @objc dynamic public func setColors(primaryColor: UIKit.UIColor, secondaryColor: UIKit.UIColor, tertiaryColor: UIKit.UIColor)
  @objc dynamic public func setDeviceToken(token: Swift.String)
  @objc dynamic public func setEnvironment(_ environment: BeHealthy.BeHealthyEnvironment)
  @objc dynamic public func setBuyWatchURL(_ url: Swift.String)
  @objc dynamic public func setProgramName(_ name: Swift.String)
  @objc dynamic public func setLanguage(_ language: BeHealthy.BeHealthyLanguage)
  @objc dynamic public func isUserEnrolled(with completion: @escaping ((Swift.Bool, Swift.String) -> ()))
}
extension QuartzCore.CALayer {
  public func logLayerTree(withIndent: Swift.Int = 0)
}
final public class GradientValueProvider : BeHealthy.AnyValueProvider {
  public init(block: @escaping BeHealthy.GradientValueProvider.ColorsValueBlock, locations: BeHealthy.GradientValueProvider.ColorLocationsBlock? = nil)
  public init(_ colors: [BeHealthy.Color], locations: [Swift.Double] = [])
  public typealias ColorsValueBlock = (CoreFoundation.CGFloat) -> [BeHealthy.Color]
  public typealias ColorLocationsBlock = (CoreFoundation.CGFloat) -> [Swift.Double]
  final public var colors: [BeHealthy.Color] {
    get
    set
  }
  final public var locations: [Swift.Double] {
    get
    set
  }
  final public var valueType: Any.Type {
    get
  }
  final public func hasUpdate(frame _: CoreFoundation.CGFloat) -> Swift.Bool
  final public func value(frame: CoreFoundation.CGFloat) -> Any
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class AnimationSubview : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct Vector1D {
  public init(_ value: Swift.Double)
  public let value: Swift.Double
}
public struct Vector3D {
  public let x: Swift.Double
  public let y: Swift.Double
  public let z: Swift.Double
  public init(x: Swift.Double, y: Swift.Double, z: Swift.Double)
}
final public class FloatValueProvider : BeHealthy.AnyValueProvider {
  public init(block: @escaping BeHealthy.FloatValueProvider.CGFloatValueBlock)
  public init(_ float: CoreFoundation.CGFloat)
  public typealias CGFloatValueBlock = (CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
  final public var float: CoreFoundation.CGFloat {
    get
    set
  }
  final public var valueType: Any.Type {
    get
  }
  final public func hasUpdate(frame _: CoreFoundation.CGFloat) -> Swift.Bool
  final public func value(frame: CoreFoundation.CGFloat) -> Any
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, *)
@objc public class BeHealthySceneDelegate : ObjectiveC.NSObject {
  @objc public static let instance: BeHealthy.BeHealthySceneDelegate
  public var window: UIKit.UIWindow?
  @objc public func scene(_ scene: UIKit.UIScene, willConnectTo session: UIKit.UISceneSession, options connectionOptions: UIKit.UIScene.ConnectionOptions)
  @objc public func sceneWillEnterForeground(_ scene: UIKit.UIScene)
  @objc public func sceneDidEnterBackground(_ scene: UIKit.UIScene)
  @objc deinit
}
extension BeHealthy.Animation {
  public typealias DownloadClosure = (BeHealthy.Animation?) -> Swift.Void
  final public var duration: Foundation.TimeInterval {
    get
  }
  final public var bounds: CoreFoundation.CGRect {
    get
  }
  final public var size: CoreFoundation.CGSize {
    get
  }
  public static func named(_ name: Swift.String, bundle: Foundation.Bundle = Bundle.main, subdirectory: Swift.String? = nil, animationCache: BeHealthy.AnimationCacheProvider? = nil) -> BeHealthy.Animation?
  public static func filepath(_ filepath: Swift.String, animationCache: BeHealthy.AnimationCacheProvider? = nil) -> BeHealthy.Animation?
  public static func loadedFrom(url: Foundation.URL, closure: @escaping BeHealthy.Animation.DownloadClosure, animationCache: BeHealthy.AnimationCacheProvider?)
  final public func progressTime(forMarker named: Swift.String) -> BeHealthy.AnimationProgressTime?
  final public func frameTime(forMarker named: Swift.String) -> BeHealthy.AnimationFrameTime?
  final public func progressTime(forFrame frameTime: BeHealthy.AnimationFrameTime) -> BeHealthy.AnimationProgressTime
  final public func frameTime(forProgress progressTime: BeHealthy.AnimationProgressTime) -> BeHealthy.AnimationFrameTime
  final public func time(forFrame frameTime: BeHealthy.AnimationFrameTime) -> Foundation.TimeInterval
  final public func frameTime(forTime time: Foundation.TimeInterval) -> BeHealthy.AnimationFrameTime
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class LottieView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var contentMode: UIKit.UIView.ContentMode {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didMoveToWindow()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public class FilepathImageProvider : BeHealthy.AnimationImageProvider {
  public init(filepath: Swift.String)
  public init(filepath: Foundation.URL)
  public func imageForAsset(asset: BeHealthy.ImageAsset) -> CoreGraphics.CGImage?
  @objc deinit
}
public class LRUAnimationCache : BeHealthy.AnimationCacheProvider {
  public init()
  public static let sharedCache: BeHealthy.LRUAnimationCache
  public var cacheSize: Swift.Int
  public func clearCache()
  public func animation(forKey: Swift.String) -> BeHealthy.Animation?
  public func setAnimation(_ animation: BeHealthy.Animation, forKey: Swift.String)
  @objc deinit
}
@objc final public class CompatibleAnimation : ObjectiveC.NSObject {
  @objc public init(name: Swift.String, bundle: Foundation.Bundle = Bundle.main)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) final public class CompatibleAnimationView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public init(compatibleAnimation: BeHealthy.CompatibleAnimation)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc @_Concurrency.MainActor(unsafe) final public var compatibleAnimation: BeHealthy.CompatibleAnimation? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) final public var loopAnimationCount: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var contentMode: UIKit.UIView.ContentMode {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) final public var shouldRasterizeWhenIdle: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) final public var currentProgress: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) final public var currentTime: Foundation.TimeInterval {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) final public var currentFrame: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) final public var realtimeAnimationFrame: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) final public var realtimeAnimationProgress: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) final public var animationSpeed: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) final public var respectAnimationFrameRate: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) final public var isAnimationPlaying: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) final public func play()
  @objc @_Concurrency.MainActor(unsafe) final public func play(completion: ((Swift.Bool) -> Swift.Void)?)
  @objc @_Concurrency.MainActor(unsafe) final public func play(fromProgress: CoreFoundation.CGFloat, toProgress: CoreFoundation.CGFloat, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc @_Concurrency.MainActor(unsafe) final public func play(fromFrame: CoreFoundation.CGFloat, toFrame: CoreFoundation.CGFloat, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc @_Concurrency.MainActor(unsafe) final public func play(fromMarker: Swift.String, toMarker: Swift.String, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc @_Concurrency.MainActor(unsafe) final public func stop()
  @objc @_Concurrency.MainActor(unsafe) final public func pause()
  @objc @_Concurrency.MainActor(unsafe) final public func reloadImages()
  @objc @_Concurrency.MainActor(unsafe) final public func forceDisplayUpdate()
  @objc @_Concurrency.MainActor(unsafe) final public func getValue(for keypath: BeHealthy.CompatibleAnimationKeypath, atFrame: CoreFoundation.CGFloat) -> Any?
  @objc @_Concurrency.MainActor(unsafe) final public func logHierarchyKeypaths()
  @objc @_Concurrency.MainActor(unsafe) final public func setColorValue(_ color: UIKit.UIColor, forKeypath keypath: BeHealthy.CompatibleAnimationKeypath)
  @objc @_Concurrency.MainActor(unsafe) final public func getColorValue(for keypath: BeHealthy.CompatibleAnimationKeypath, atFrame: CoreFoundation.CGFloat) -> UIKit.UIColor?
  @objc @_Concurrency.MainActor(unsafe) final public func addSubview(_ subview: BeHealthy.AnimationSubview, forLayerAt keypath: BeHealthy.CompatibleAnimationKeypath)
  @objc @_Concurrency.MainActor(unsafe) final public func convert(rect: CoreFoundation.CGRect, toLayerAt keypath: BeHealthy.CompatibleAnimationKeypath?) -> CoreFoundation.CGRect
  @objc @_Concurrency.MainActor(unsafe) final public func convert(point: CoreFoundation.CGPoint, toLayerAt keypath: BeHealthy.CompatibleAnimationKeypath?) -> CoreFoundation.CGPoint
  @objc @_Concurrency.MainActor(unsafe) final public func progressTime(forMarker named: Swift.String) -> CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) final public func frameTime(forMarker named: Swift.String) -> CoreFoundation.CGFloat
  @objc deinit
}
@objc final public class CompatibleAnimationKeypath : ObjectiveC.NSObject {
  @objc public init(keypath: Swift.String)
  @objc public init(keys: [Swift.String])
  final public let animationKeypath: BeHealthy.AnimationKeypath
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(AchievementsEntity) public class AchievementsEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension BeHealthy.AchievementsEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<BeHealthy.AchievementsEntity>
  @objc @NSManaged dynamic public var awardedTimes: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var group: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lastAwardedDate: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var type: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var user: BeHealthy.UserEntity? {
    @objc get
    @objc set
  }
}
extension BeHealthy.AchievementsEntity : Swift.Identifiable {
  public typealias ID = Swift.String?
}
@_inheritsConvenienceInitializers @objc(DailyTargetsEntity) public class DailyTargetsEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension BeHealthy.DailyTargetsEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<BeHealthy.DailyTargetsEntity>
  @objc @NSManaged dynamic public var endDate: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var exercise: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var move: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var stand: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var startDate: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var todayTargets: BeHealthy.TodayTargetsEntity? {
    @objc get
    @objc set
  }
}
extension BeHealthy.DailyTargetsEntity : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(MonthlyTargetsEntity) public class MonthlyTargetsEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension BeHealthy.MonthlyTargetsEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<BeHealthy.MonthlyTargetsEntity>
  @objc @NSManaged dynamic public var completed: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var month: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var target: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var todayTargets: BeHealthy.TodayTargetsEntity? {
    @objc get
    @objc set
  }
}
extension BeHealthy.MonthlyTargetsEntity : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(TodayTargetsEntity) public class TodayTargetsEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension BeHealthy.TodayTargetsEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<BeHealthy.TodayTargetsEntity>
  @objc @NSManaged dynamic public var daily: BeHealthy.DailyTargetsEntity? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var monthly: BeHealthy.MonthlyTargetsEntity? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var user: BeHealthy.UserEntity? {
    @objc get
    @objc set
  }
}
extension BeHealthy.TodayTargetsEntity : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(UserEntity) public class UserEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension BeHealthy.UserEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<BeHealthy.UserEntity>
  @objc @NSManaged dynamic public var awardedInstallments: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var birthday: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var email: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var gender: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var height: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var installments: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lastProgressDaysSynch: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lastProgressSaved: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var phone: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var plan: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var programStartDate: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timeZone: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var userCreationDate: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var userId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var weight: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var achievements: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var todayTargets: BeHealthy.TodayTargetsEntity? {
    @objc get
    @objc set
  }
}
extension BeHealthy.UserEntity {
  @objc(addAchievementsObject:) @NSManaged dynamic public func addToAchievements(_ value: BeHealthy.AchievementsEntity)
  @objc(removeAchievementsObject:) @NSManaged dynamic public func removeFromAchievements(_ value: BeHealthy.AchievementsEntity)
  @objc(addAchievements:) @NSManaged dynamic public func addToAchievements(_ values: Foundation.NSSet)
  @objc(removeAchievements:) @NSManaged dynamic public func removeFromAchievements(_ values: Foundation.NSSet)
}
extension BeHealthy.UserEntity : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(YesterdayProgressEntity) public class YesterdayProgressEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension BeHealthy.YesterdayProgressEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<BeHealthy.YesterdayProgressEntity>
  @objc @NSManaged dynamic public var date: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var energyBurned: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var energyGoal: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var exerciseGoal: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var exerciseTime: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var hidden: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var standGoal: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var standHours: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var userEmail: Swift.String? {
    @objc get
    @objc set
  }
}
extension BeHealthy.YesterdayProgressEntity : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension BeHealthy.ColorFormatDenominator : Swift.Equatable {}
extension BeHealthy.ColorFormatDenominator : Swift.Hashable {}
extension BeHealthy.LayerType : Swift.Equatable {}
extension BeHealthy.LayerType : Swift.Hashable {}
extension BeHealthy.LayerType : Swift.RawRepresentable {}
extension BeHealthy.MatteType : Swift.Equatable {}
extension BeHealthy.MatteType : Swift.Hashable {}
extension BeHealthy.MatteType : Swift.RawRepresentable {}
extension BeHealthy.BlendMode : Swift.Equatable {}
extension BeHealthy.BlendMode : Swift.Hashable {}
extension BeHealthy.BlendMode : Swift.RawRepresentable {}
extension BeHealthy.AnimatedSwitch.CancelBehavior : Swift.Equatable {}
extension BeHealthy.AnimatedSwitch.CancelBehavior : Swift.Hashable {}
extension BeHealthy.CoordinateSpace : Swift.Equatable {}
extension BeHealthy.CoordinateSpace : Swift.Hashable {}
extension BeHealthy.CoordinateSpace : Swift.RawRepresentable {}
extension BeHealthy.LottieBackgroundBehavior : Swift.Equatable {}
extension BeHealthy.LottieBackgroundBehavior : Swift.Hashable {}
extension BeHealthy.BeHealthyEnvironment : Swift.Equatable {}
extension BeHealthy.BeHealthyEnvironment : Swift.Hashable {}
extension BeHealthy.BeHealthyEnvironment : Swift.RawRepresentable {}
extension BeHealthy.BeHealthyLanguage : Swift.Equatable {}
extension BeHealthy.BeHealthyLanguage : Swift.Hashable {}
